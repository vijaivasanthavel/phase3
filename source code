 # 1. Import Libraries import tensorflow as tf from tensorflow.keras import layers, models import matplotlib.pyplot as plt import numpy as np
# 2. Load MNIST Dataset
(x_train, y_train), (x_test, y_test) = tf.keras.datasets.mnist.load_data()
# Normalize the images x_train = x_train / 255.0 x_test = x_test / 255.0
# 3. Build the Model model = models.Sequential([
    layers.Flatten(input_shape=(28, 28)),
    layers.Dense(128, activation='relu'),
    layers.Dense(64, activation='relu'),
    layers.Dense(10, activation='softmax')
])
# 4. Compile and Train model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
model.fit(x_train, y_train, epochs=5, validation_split=0.1)
# 5. Evaluate the Model test_loss, test_acc = model.evaluate(x_test, y_test) print(f"Test accuracy: {test_acc:.4f}")
# 6. Make Predictions predictions = model.predict(x_test) # 7. Visualize Some Predictions def plot_image(i, predictions_array, true_label, img):
    true_label, img = true_label[i], img[i]
    plt.grid(False)
    plt.xticks([])
    plt.yticks([])
    plt.imshow(img, cmap=plt.cm.binary)
    predicted_label = np.argmax(predictions_array[i])
    color = 'blue' if predicted_label == true_label else 'red'
    plt.xlabel(f"Pred: {predicted_label} | True: {true_label}", color=color)
# Plot 5 images plt.figure(figsize=(10,5)) for i in range(5):     plt.subplot(1, 5, i+1)
    plot_image(i, predictions, y_test, x_test) plt.tight_layout() plt.show()
